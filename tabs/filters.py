import pandas as pd
import streamlit as st

def sort_by_sessions(series, df):
    session_counts = df.groupby(series).Sess√µes.sum().sort_values(ascending=False)
    return ["Selecionar Todos"] + session_counts.index.tolist()

def date_filters():
    today = pd.to_datetime("today").date()
    yesterday = today - pd.Timedelta(days=1)
    seven_days_ago = today - pd.Timedelta(days=7)
    thirty_days_ago = today - pd.Timedelta(days=30)
    first_day_of_month = today.replace(day=1)
    
    # Calcular primeiro e √∫ltimo dia do m√™s passado
    last_day_of_prev_month = first_day_of_month - pd.Timedelta(days=1)
    first_day_of_prev_month = last_day_of_prev_month.replace(day=1)
    
    with st.sidebar:
        if st.session_state.username == "mymetric":
            st.markdown("## MYMETRIC")
        else:
            st.markdown("## " + st.session_state.tablename.upper())

    # Inicializa o estado do bot√£o ativo se n√£o existir
    if 'active_button' not in st.session_state:
        st.session_state.active_button = "mes"
        st.session_state.start_date = first_day_of_month
        st.session_state.end_date = today
    
    # Filtro de datas interativo
    with st.sidebar.expander("Datas", expanded=True):
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("Hoje", 
                        type="secondary",
                        help="Dados de hoje",
                        use_container_width=True,
                        key="hoje"):
                st.session_state.active_button = "hoje"
                st.session_state.start_date = today
                st.session_state.end_date = today
            
            if st.button("√öltimos 7 Dias",
                        type="secondary",
                        help="Dados dos √∫ltimos 7 dias",
                        use_container_width=True,
                        key="7d"):
                st.session_state.active_button = "7d"
                st.session_state.start_date = seven_days_ago
                st.session_state.end_date = today
            
            if st.button("M√™s Atual",
                        type="secondary",
                        help="Dados do m√™s atual",
                        use_container_width=True,
                        key="mes"):
                st.session_state.active_button = "mes"
                st.session_state.start_date = first_day_of_month
                st.session_state.end_date = today
                
        with col2:
            if st.button("Ontem",
                        type="secondary",
                        help="Dados de ontem",
                        use_container_width=True,
                        key="ontem"):
                st.session_state.active_button = "ontem"
                st.session_state.start_date = yesterday
                st.session_state.end_date = yesterday
            
            if st.button("√öltimos 30 Dias",
                        type="secondary",
                        help="Dados dos √∫ltimos 30 dias",
                        use_container_width=True,
                        key="30d"):
                st.session_state.active_button = "30d"
                st.session_state.start_date = thirty_days_ago
                st.session_state.end_date = today
            
            if st.button("M√™s Passado",
                        type="secondary",
                        help="Dados do m√™s passado",
                        use_container_width=True,
                        key="mes_passado"):
                st.session_state.active_button = "mes_passado"
                st.session_state.start_date = first_day_of_prev_month
                st.session_state.end_date = last_day_of_prev_month

        date_col1, date_col2 = st.columns(2)
        with date_col1:
            custom_start = st.date_input("Data Inicial", st.session_state.start_date, key="custom_start_date")
        with date_col2:
            custom_end = st.date_input("Data Final", st.session_state.end_date, key="custom_end_date")
        
        # Bot√£o para aplicar per√≠odo personalizado
        if st.button("Aplicar Per√≠odo", 
                    type="primary",
                    help="Aplicar o per√≠odo selecionado",
                    use_container_width=True):
            st.session_state.active_button = "custom"
            st.session_state.start_date = custom_start
            st.session_state.end_date = custom_end

    # Atualizar as vari√°veis locais com os valores da sess√£o
    start_date = st.session_state.start_date
    end_date = st.session_state.end_date

def traffic_filters(df):
    if "cluster_selected" not in st.session_state:
        st.session_state.cluster_selected = ["Selecionar Todos"]
        st.session_state.origem_selected = ["Selecionar Todos"]
        st.session_state.midia_selected = ["Selecionar Todos"]
        st.session_state.campanha_selected = ["Selecionar Todos"]
        st.session_state.conteudo_selected = ["Selecionar Todos"]
        st.session_state.pagina_de_entrada_selected = ["Selecionar Todos"]

    with st.sidebar:
        # Filtros B√°sicos
        with st.expander("Filtros B√°sicos", expanded=True):
            # Adiciona "Selecionar Todos" como primeira op√ß√£o em cada filtro
            all_clusters = sort_by_sessions('Cluster', df)
            
            # Criar os elementos de filtro
            cluster_selected = st.multiselect(
                "Cluster",
                options=all_clusters,
                default=["Selecionar Todos"]
            )
            
            st.session_state.cluster_selected = cluster_selected

        # Filtro de atribui√ß√£o (sempre por √∫ltimo)
        with st.expander("Modelos de Atribui√ß√£o", expanded=True):
            # Adiciona op√ß√µes de atribui√ß√£o
            all_attribution = ["√öltimo Clique N√£o Direto", "Primeiro Clique"]
            
            attribution_model = st.radio(
                "Modelo de Atribui√ß√£o",
                options=all_attribution,
                index=0,
                help="Escolha o modelo de atribui√ß√£o para an√°lise dos dados",
                key="attribution_model_radio"
            )
            
            # For√ßa recarregamento dos dados quando o modelo muda
            if 'last_attribution_model' not in st.session_state:
                st.session_state.last_attribution_model = attribution_model
            
            if st.session_state.last_attribution_model != attribution_model:
                st.session_state.last_attribution_model = attribution_model
                st.session_state.attribution_model = attribution_model
                # Limpa o cache antes de recarregar
                if 'cache_data' in st.session_state:
                    st.session_state.cache_data = {}
                if 'cache_timestamps' in st.session_state:
                    st.session_state.cache_timestamps = {}
                if 'background_tasks' in st.session_state:
                    st.session_state.background_tasks = {}
                st.rerun()
            else:
                st.session_state.attribution_model = attribution_model

            # Inicializa o estado se n√£o existir
            if 'show_attribution_info' not in st.session_state:
                st.session_state.show_attribution_info = False

            # Bot√£o para mostrar/ocultar
            if st.button('Sobre Modelos de Atribui√ß√£o', key='attribution_info_button'):
                st.session_state.show_attribution_info = not st.session_state.show_attribution_info

            # Conte√∫do que ser√° mostrado/ocultado
            if st.session_state.show_attribution_info:
                st.markdown("""
                    ### ‚ÑπÔ∏è Modelos de Atribui√ß√£o
                    
                    Os modelos de atribui√ß√£o determinam como o cr√©dito por uma convers√£o √© distribu√≠do entre os diferentes pontos de contato:
                    
                    üéØ **√öltimo Clique N√£o Direto**
                    - Atribui 100% do cr√©dito ao √∫ltimo canal n√£o direto que o usu√°rio interagiu antes da convers√£o
                    - Ignora acessos diretos posteriores
                    - Mais comum para an√°lise de campanhas de curto prazo
                    
                    1Ô∏è‚É£ **Primeiro Clique**
                    - Atribui 100% do cr√©dito ao primeiro canal que trouxe o usu√°rio ao site
                    - Valoriza a descoberta inicial
                    - √ötil para entender quais canais s√£o mais eficientes em trazer novos usu√°rios
                """)

def traffic_filters_detailed(df):
    with st.sidebar:
        # Filtros existentes
        with st.expander("Filtros Avan√ßados", expanded=False):
            # Adiciona "Selecionar Todos" como primeira op√ß√£o em cada filtro
            all_origins = sort_by_sessions('Origem', df)
            all_media = sort_by_sessions('M√≠dia', df)
            all_campaigns = sort_by_sessions('Campanha', df)
            all_content = sort_by_sessions('Conte√∫do', df)
            all_pages = sort_by_sessions('P√°gina de Entrada', df)
            
            # Criar os elementos de filtro
            origem_selected = st.multiselect(
                "Origem",
                options=all_origins,
                default=["Selecionar Todos"]
            )
            
            midia_selected = st.multiselect(
                "M√≠dia",
                options=all_media,
                default=["Selecionar Todos"]
            )
            
            campanha_selected = st.multiselect(
                "Campanha",
                options=all_campaigns,
                default=["Selecionar Todos"]
            )
            
            conteudo_selected = st.multiselect(
                "Conte√∫do",
                options=all_content,
                default=["Selecionar Todos"]
            )
            
            pagina_de_entrada_selected = st.multiselect(
                "P√°gina de Entrada",
                options=all_pages,
                default=["Selecionar Todos"]
            )
            
            st.session_state.origem_selected = origem_selected
            st.session_state.midia_selected = midia_selected
            st.session_state.campanha_selected = campanha_selected
            st.session_state.conteudo_selected = conteudo_selected
            st.session_state.pagina_de_entrada_selected = pagina_de_entrada_selected

def apply_filters(df):
    """
    Aplica filtros ao DataFrame baseado nas sele√ß√µes do usu√°rio.
    N√£o cria elementos UI - apenas aplica a l√≥gica de filtragem.
    """
    # Verificar se o DataFrame est√° vazio
    if df.empty:
        return df
        
    # Criar uma c√≥pia do DataFrame para n√£o modificar o original
    df_filtered = df.copy()

    # Lista de filtros para aplicar
    filters = [
        ('cluster_selected', 'Cluster'),
        ('origem_selected', 'Origem'),
        ('midia_selected', 'M√≠dia'),
        ('campanha_selected', 'Campanha'),
        ('conteudo_selected', 'Conte√∫do'),
        ('pagina_de_entrada_selected', 'P√°gina de Entrada')
    ]

    # Aplicar cada filtro
    for state_key, column in filters:
        selected_values = st.session_state.get(state_key, [])
        if selected_values and "Selecionar Todos" not in selected_values:
            # Garantir que a coluna existe antes de filtrar
            if column in df_filtered.columns:
                # Converter valores para string para evitar problemas de tipo
                df_filtered[column] = df_filtered[column].astype(str)
                selected_values = [str(val) for val in selected_values]
                df_filtered = df_filtered[df_filtered[column].isin(selected_values)]
    
    return df_filtered

    