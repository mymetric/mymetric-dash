#!/usr/bin/env python3
"""
Script para envio autom√°tico do alerta di√°rio de uso do hub.
Este script pode ser executado via cron job para enviar alertas di√°rios.
"""

import sys
import os
import json
from datetime import datetime

# Add the project root directory to the Python path
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(os.path.dirname(os.path.dirname(current_dir)))
sys.path.append(project_root)

# Importar o m√≥dulo de alertas
from hub_daily_usage import send_alerts_to_test_groups, send_daily_hub_usage_alert

def load_config():
    """Carrega configura√ß√µes do arquivo de configura√ß√£o."""
    config_file = os.path.join(current_dir, 'alert_config.json')
    
    if os.path.exists(config_file):
        try:
            with open(config_file, 'r') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ùå Erro ao carregar configura√ß√£o: {str(e)}")
            return None
    else:
        # Configura√ß√£o padr√£o
        default_config = {
            "test_groups": [
                "5511999999999-1234567890"  # Substitua pelo ID real do grupo de teste
            ],
            "admin_phone": "5511999999999",  # Substitua pelo seu n√∫mero
            "enable_daily_alerts": True,
            "enable_test_mode": False
        }
        
        # Salvar configura√ß√£o padr√£o
        try:
            with open(config_file, 'w') as f:
                json.dump(default_config, f, indent=2)
            print(f"üìù Arquivo de configura√ß√£o criado: {config_file}")
            print("‚ö†Ô∏è Por favor, edite o arquivo com os n√∫meros corretos antes de usar.")
            return default_config
        except Exception as e:
            print(f"‚ùå Erro ao criar arquivo de configura√ß√£o: {str(e)}")
            return None

def send_daily_alert():
    """Envia o alerta di√°rio de uso do hub."""
    print(f"üöÄ Iniciando envio do alerta di√°rio - {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    
    # Carregar configura√ß√£o
    config = load_config()
    if not config:
        print("‚ùå Falha ao carregar configura√ß√£o")
        return False
    
    if not config.get("enable_daily_alerts", True):
        print("‚ö†Ô∏è Alertas di√°rios desabilitados na configura√ß√£o")
        return True
    
    test_mode = config.get("enable_test_mode", False)
    
    try:
        # Enviar para grupos de teste
        success = send_alerts_to_test_groups(test_mode=test_mode)
        
        if success:
            print("‚úÖ Alertas enviados com sucesso para todos os grupos!")
            
            # Enviar confirma√ß√£o para admin se configurado
            admin_phone = config.get("admin_phone")
            if admin_phone and admin_phone != "5511999999999":
                confirmation_message = f"""
‚úÖ *ALERTA DI√ÅRIO ENVIADO*
üìÖ {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}

O alerta de uso di√°rio do hub foi enviado com sucesso para todos os grupos configurados.

üîó *ACESSO AO HUB*
https://mymetric-hub.streamlit.app
"""
                send_daily_hub_usage_alert(admin_phone, testing_mode=False)
                print(f"‚úÖ Confirma√ß√£o enviada para admin: {admin_phone}")
            
            return True
        else:
            print("‚ùå Falha ao enviar alertas para alguns grupos")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro durante o envio do alerta: {str(e)}")
        return False

def main():
    """Fun√ß√£o principal do script."""
    print("üìä SISTEMA DE ALERTAS DI√ÅRIOS - MYMETRIC HUB")
    print("=" * 50)
    
    # Verificar argumentos da linha de comando
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == "test":
            # Modo teste
            print("üß™ Executando em modo teste...")
            config = load_config()
            if config:
                config["enable_test_mode"] = True
                success = send_daily_alert()
                print(f"‚úÖ Teste {'conclu√≠do com sucesso' if success else 'falhou'}")
                return 0 if success else 1
        
        elif command == "config":
            # Mostrar configura√ß√£o atual
            config = load_config()
            if config:
                print("üìã Configura√ß√£o atual:")
                print(json.dumps(config, indent=2))
                return 0
            else:
                print("‚ùå Falha ao carregar configura√ß√£o")
                return 1
        
        elif command == "help":
            # Mostrar ajuda
            print("""
üìñ AJUDA - SISTEMA DE ALERTAS DI√ÅRIOS

Uso: python send_daily_hub_alert.py [comando]

Comandos dispon√≠veis:
  (sem comando)  - Envia alerta di√°rio normal
  test           - Envia alerta em modo teste
  config         - Mostra configura√ß√£o atual
  help           - Mostra esta ajuda

Configura√ß√£o:
  O arquivo alert_config.json √© criado automaticamente na primeira execu√ß√£o.
  Edite este arquivo para configurar os n√∫meros de WhatsApp e outras op√ß√µes.

Cron Job (para envio autom√°tico di√°rio):
  0 18 * * * cd /caminho/para/projeto && python send_daily_hub_alert.py
            """)
            return 0
        
        else:
            print(f"‚ùå Comando desconhecido: {command}")
            print("Execute 'python send_daily_hub_alert.py help' para ver os comandos dispon√≠veis")
            return 1
    
    # Execu√ß√£o normal (sem argumentos)
    success = send_daily_alert()
    
    if success:
        print("\nüéâ Alerta di√°rio enviado com sucesso!")
        return 0
    else:
        print("\n‚ùå Falha ao enviar alerta di√°rio")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code) 