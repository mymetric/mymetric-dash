#!/bin/bash

# Script para configurar o cron job do alerta di√°rio do hub
# Execute este script para configurar o envio autom√°tico di√°rio

echo "üöÄ Configurando Cron Job para Alertas Di√°rios do MyMetric Hub"
echo "=============================================================="

# Obter o diret√≥rio atual do projeto
PROJECT_DIR=$(pwd)
echo "üìÅ Diret√≥rio do projeto: $PROJECT_DIR"

# Verificar se o Python est√° dispon√≠vel
if ! command -v python3 &> /dev/null; then
    echo "‚ùå Python3 n√£o encontrado. Por favor, instale o Python3 primeiro."
    exit 1
fi

echo "‚úÖ Python3 encontrado: $(python3 --version)"

# Verificar se os arquivos necess√°rios existem
if [ ! -f "alerts/usage_metrics/send_daily_hub_alert.py" ]; then
    echo "‚ùå Arquivo send_daily_hub_alert.py n√£o encontrado!"
    exit 1
fi

if [ ! -f "alerts/usage_metrics/hub_daily_usage.py" ]; then
    echo "‚ùå Arquivo hub_daily_usage.py n√£o encontrado!"
    exit 1
fi

echo "‚úÖ Arquivos necess√°rios encontrados"

# Verificar se o arquivo de configura√ß√£o existe
if [ ! -f "alerts/usage_metrics/alert_config.json" ]; then
    echo "‚ö†Ô∏è Arquivo de configura√ß√£o n√£o encontrado. Criando..."
    PYTHONPATH=. python3 alerts/usage_metrics/send_daily_hub_alert.py config
fi

echo "‚úÖ Configura√ß√£o verificada"

# Perguntar sobre o hor√°rio de envio
echo ""
echo "‚è∞ Configura√ß√£o do Hor√°rio de Envio"
echo "=================================="
echo "1. 18:00 (recomendado)"
echo "2. 19:00"
echo "3. 20:00"
echo "4. Personalizado"
echo ""
read -p "Escolha o hor√°rio (1-4): " time_choice

case $time_choice in
    1)
        HOUR=18
        MINUTE=0
        ;;
    2)
        HOUR=19
        MINUTE=0
        ;;
    3)
        HOUR=20
        MINUTE=0
        ;;
    4)
        read -p "Digite a hora (0-23): " HOUR
        read -p "Digite o minuto (0-59): " MINUTE
        ;;
    *)
        echo "‚ùå Op√ß√£o inv√°lida. Usando 18:00 como padr√£o."
        HOUR=18
        MINUTE=0
        ;;
esac

echo "‚úÖ Hor√°rio configurado: $HOUR:$MINUTE"

# Criar o comando do cron
CRON_COMMAND="$MINUTE $HOUR * * * cd $PROJECT_DIR && PYTHONPATH=. python3 alerts/usage_metrics/send_daily_hub_alert.py"

echo ""
echo "üìã Comando do Cron Job:"
echo "$CRON_COMMAND"
echo ""

# Perguntar se deseja adicionar ao crontab
read -p "Deseja adicionar este comando ao crontab? (y/n): " confirm

if [ "$confirm" = "y" ] || [ "$confirm" = "Y" ]; then
    # Verificar se j√° existe um cron job para este script
    if crontab -l 2>/dev/null | grep -q "send_daily_hub_alert.py"; then
        echo "‚ö†Ô∏è J√° existe um cron job para este script. Removendo o anterior..."
        crontab -l 2>/dev/null | grep -v "send_daily_hub_alert.py" | crontab -
    fi
    
    # Adicionar novo cron job
    (crontab -l 2>/dev/null; echo "$CRON_COMMAND") | crontab -
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Cron job adicionado com sucesso!"
        echo ""
        echo "üìã Cron jobs ativos:"
        crontab -l
    else
        echo "‚ùå Erro ao adicionar cron job"
        exit 1
    fi
else
    echo "‚ÑπÔ∏è Cron job n√£o foi adicionado."
    echo "Para adicionar manualmente, execute:"
    echo "crontab -e"
    echo "E adicione a linha:"
    echo "$CRON_COMMAND"
fi

echo ""
echo "üéâ Configura√ß√£o conclu√≠da!"
echo ""
echo "üìù Pr√≥ximos passos:"
echo "1. Edite o arquivo alerts/usage_metrics/alert_config.json com os n√∫meros corretos"
echo "2. Teste o sistema com: PYTHONPATH=. python3 alerts/usage_metrics/send_daily_hub_alert.py test"
echo "3. O primeiro alerta ser√° enviado automaticamente √†s $HOUR:$MINUTE"
echo ""
echo "üìû Para suporte, consulte o arquivo alerts/usage_metrics/ALERTAS_README.md" 