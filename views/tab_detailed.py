import streamlit as st
from modules.load_data import load_detailed_data
# from views.tab_general import tables

def tables_detailed(df):

    st.title("üíº Vis√£o Detalhada")
    st.markdown("""---""")

    # Tabela de Cluster de Origens
    st.header("Cluster de Origens")
    st.write("Modelo de atribui√ß√£o padr√£o: √∫ltimo clique n√£o direto.")
    
    with st.expander("‚ÑπÔ∏è Entenda os Clusters", expanded=False):
        st.markdown("""
            ### Explica√ß√£o dos Clusters
            
            Os clusters s√£o agrupamentos de origens de tr√°fego que ajudam a entender melhor a fonte dos seus visitantes:
            
            üü¢ **Google Ads**
            - Tr√°fego pago vindo do Google Ads
            - Identificado por: origem=google e m√≠dia=cpc
            
            üîµ **Meta Ads**
            - Tr√°fego pago vindo do Facebook/Instagram Ads
            - Identificado por: presen√ßa do par√¢metro fbclid na URL
            
            üü£ **Social**
            - Tr√°fego org√¢nico das redes sociais
            - Identificado por: m√≠dia=social
            
            üå≥ **Google Org√¢nico**
            - Tr√°fego org√¢nico do Google
            - Identificado por: origem=google e m√≠dia=organic
            
            üü° **Direto**
            - Acessos diretos ao site
            - Identificado por: origem=direct
            
            ‚úâÔ∏è **CRM**
            - Tr√°fego vindo de e-mails e comunica√ß√µes diretas
            - Identificado por: origem=crm
            
            üóíÔ∏è **Draft**
            - Pedidos criados manualmente na Shopify
            - Identificado por: origem=shopify_draft_order
            
            üç™ **Perda de Cookies**
            - Sess√µes sem identifica√ß√£o de origem
            - Identificado por: origem=not captured
            
            ‚óªÔ∏è **Outros**
            - Outras combina√ß√µes de origem/m√≠dia n√£o classificadas acima
            - Formato: origem/m√≠dia
        """)
        
    aggregated_df = df.groupby(['Cluster']).agg({
        'Sess√µes': 'sum', 
        'Pedidos': 'sum', 
        'Pedidos Primeiro Clique': 'sum', 
        'Pedidos Pagos': 'sum', 
        'Receita': 'sum', 
        'Receita Paga': 'sum'
    }).reset_index()
    
    # Adiciona coluna de taxa de convers√£o
    aggregated_df['Tx Convers√£o'] = (aggregated_df['Pedidos'] / aggregated_df['Sess√µes'] * 100).round(2).astype(str) + '%'
    aggregated_df['% Receita'] = ((aggregated_df['Receita'] / aggregated_df['Receita'].sum()) * 100).round(2).astype(str) + '%'
    aggregated_df = aggregated_df.sort_values(by='Pedidos', ascending=False)
    
    st.data_editor(aggregated_df, hide_index=1, use_container_width=1, key="detailed_cluster_origens")

    # tables(df)
    # Tabela de Origem e M√≠dia
    st.header("Origem e M√≠dia")
    
    aggregated_df = df.groupby(['Origem', 'M√≠dia']).agg({
        'Sess√µes': 'sum', 
        'Pedidos': 'sum', 
        'Pedidos Primeiro Clique': 'sum', 
        'Pedidos Pagos': 'sum', 
        'Receita': 'sum', 
        'Receita Paga': 'sum'
    }).reset_index()
    
    # Adiciona coluna de taxa de convers√£o
    aggregated_df['Tx Convers√£o'] = (aggregated_df['Pedidos'] / aggregated_df['Sess√µes'] * 100).round(2).astype(str) + '%'
    aggregated_df['% Receita'] = ((aggregated_df['Receita'] / aggregated_df['Receita'].sum()) * 100).round(2).astype(str) + '%'
    aggregated_df = aggregated_df.sort_values(by='Pedidos', ascending=False)
    
    st.data_editor(aggregated_df, hide_index=1, use_container_width=1, key="detailed_origem_midia")

    # Tabela de Campanhas
    st.header("Campanhas")
    
    campaigns = df.groupby(['Campanha']).agg({
        'Sess√µes': 'sum', 
        'Pedidos': 'sum', 
        'Pedidos Primeiro Clique': 'sum', 
        'Receita': 'sum', 
        'Receita Paga': 'sum'
    }).reset_index()
    
    # Adiciona coluna de taxa de convers√£o
    campaigns['Tx Convers√£o'] = (campaigns['Pedidos'] / campaigns['Sess√µes'] * 100).round(2).astype(str) + '%'
    campaigns['% Receita'] = ((campaigns['Receita'] / campaigns['Receita'].sum()) * 100).round(2).astype(str) + '%'
    campaigns = campaigns.sort_values(by='Pedidos', ascending=False)
    
    st.data_editor(campaigns, hide_index=1, use_container_width=1, key="detailed_campanhas")

    # Tabela de Conte√∫do
    st.header("Conte√∫do")
    st.write("Valor do utm_content.")
    
    conteudo = df.groupby(['Conte√∫do']).agg({
        'Sess√µes': 'sum', 
        'Pedidos': 'sum', 
        'Pedidos Primeiro Clique': 'sum', 
        'Receita': 'sum', 
        'Receita Paga': 'sum'
    }).reset_index()
    
    # Adiciona coluna de taxa de convers√£o
    conteudo['Tx Convers√£o'] = (conteudo['Pedidos'] / conteudo['Sess√µes'] * 100).round(2).astype(str) + '%'
    conteudo['% Receita'] = ((conteudo['Receita'] / conteudo['Receita'].sum()) * 100).round(2).astype(str) + '%'
    conteudo = conteudo.sort_values(by='Pedidos', ascending=False)
    
    st.data_editor(conteudo, hide_index=1, use_container_width=1, key="detailed_conteudo")

    # Tabela de P√°gina de Entrada
    st.header("P√°gina de Entrada")
    st.write("P√°gina por onde o usu√°rio iniciou a sess√£o")
    
    pagina_de_entrada = df.groupby(['P√°gina de Entrada']).agg({
        'Sess√µes': 'sum', 
        'Pedidos': 'sum', 
        'Pedidos Primeiro Clique': 'sum', 
        'Receita': 'sum', 
        'Receita Paga': 'sum'
    }).reset_index()
    
    # Adiciona coluna de taxa de convers√£o
    pagina_de_entrada['Tx Convers√£o'] = (pagina_de_entrada['Pedidos'] / pagina_de_entrada['Sess√µes'] * 100).round(2).astype(str) + '%'
    pagina_de_entrada['% Receita'] = ((pagina_de_entrada['Receita'] / pagina_de_entrada['Receita'].sum()) * 100).round(2).astype(str) + '%'
    pagina_de_entrada = pagina_de_entrada.sort_values(by='Pedidos', ascending=False)
    
    st.data_editor(pagina_de_entrada, hide_index=1, use_container_width=1, key="detailed_pagina_entrada")

    # Tabela de Cupons
    st.header("Cupons")
    st.write("An√°lise dos cupons utilizados nos pedidos")
    
    cupons = df.groupby(['Cupom']).agg({
        'Sess√µes': 'sum', 
        'Pedidos': 'sum', 
        'Pedidos Primeiro Clique': 'sum', 
        'Receita': 'sum', 
        'Receita Paga': 'sum'
    }).reset_index()
    
    # Adiciona coluna de taxa de convers√£o
    cupons['Tx Convers√£o'] = (cupons['Pedidos'] / cupons['Sess√µes'] * 100).round(2).astype(str) + '%'
    cupons['% Receita'] = ((cupons['Receita'] / cupons['Receita'].sum()) * 100).round(2).astype(str) + '%'
    cupons = cupons.sort_values(by='Pedidos', ascending=False)
    
    st.data_editor(cupons, hide_index=1, use_container_width=1, key="detailed_cupons")

def display_tab_detailed():

    df = load_detailed_data()
    tables_detailed(df)