import streamlit as st
from datetime import date, datetime
import json
from google.cloud import bigquery
from google.oauth2 import service_account
import requests

def get_bigquery_client():
    """Cria um cliente BigQuery com as credenciais corretas."""
    credentials = service_account.Credentials.from_service_account_info(
        st.secrets["gcp_service_account"]
    )
    return bigquery.Client(credentials=credentials)

def load_closed_notices(username):
    """Carrega os avisos fechados do BigQuery."""
    client = get_bigquery_client()
    
    query = f"""
    SELECT notices
    FROM `mymetric-hub-shopify.dbt_config.user_notices`
    WHERE username = '{username}'
    LIMIT 1
    """
    
    try:
        query_job = client.query(query)
        rows = list(query_job.result())
        if rows:
            notices_str = rows[0]['notices']
            return json.loads(notices_str) if notices_str else {}
        return {}
    except Exception as e:
        st.error(f"Erro ao carregar avisos: {str(e)}")
        return {}

def save_closed_notices(username, notices):
    """Salva os avisos fechados no BigQuery."""
    client = get_bigquery_client()
    
    # Converte o dicion√°rio de avisos para JSON
    notices_json = json.dumps(notices)
    
    # Query para inserir ou atualizar os avisos
    query = f"""
    MERGE `mymetric-hub-shopify.dbt_config.user_notices` AS target
    USING (SELECT '{username}' as username, '{notices_json}' as notices) AS source
    ON target.username = source.username
    WHEN MATCHED THEN
        UPDATE SET notices = source.notices, updated_at = CURRENT_TIMESTAMP()
    WHEN NOT MATCHED THEN
        INSERT (username, notices, created_at, updated_at)
        VALUES (source.username, source.notices, CURRENT_TIMESTAMP(), CURRENT_TIMESTAMP())
    """
    
    try:
        client.query(query)
    except Exception as e:
        st.error(f"Erro ao salvar avisos: {str(e)}")

def initialize_notices():
    """Inicializa o estado dos avisos se n√£o existir."""
    if 'closed_notices' not in st.session_state:
        st.session_state.closed_notices = {}

def show_feature_notices(username, meta_receita):
    """Exibe os avisos de novas features com op√ß√£o de n√£o mostrar novamente."""
    closed_notices = load_closed_notices(username)
    
    # Aviso de migra√ß√£o para hub.mymetric.app
    if not closed_notices.get('hub_migration_notice', False):
        st.info("""
        ### üîÑ Mudan√ßa de Endere√ßo
        
        **Aten√ß√£o:** Este aplicativo agora estar√° dispon√≠vel exclusivamente em:
        
        **[hub.mymetric.app](https://hub.mymetric.app)**
        
        Por favor, atualize seus favoritos e utilize o novo endere√ßo para acessar o MyMetric Hub.
        """)
        if st.button("Entendi", key="hub_migration_notice", type="primary"):
            closed_notices['hub_migration_notice'] = True
            save_closed_notices(username, closed_notices)
            st.rerun()
    
    # Aviso do Mapa de Calor
    if not closed_notices.get('heatmap_notice', False):
        st.info("""
        ### üÜï Nova Feature: Mapa de Calor de Convers√£o
        
        Agora voc√™ pode visualizar suas taxas de convers√£o por hora do dia e dia da semana em um mapa de calor interativo.
        
        **Recursos dispon√≠veis:**
        * Identificar os melhores hor√°rios para suas vendas
        * Otimizar suas campanhas de marketing
        * Entender o comportamento dos seus clientes
        * Filtrar por m√≠nimo de sess√µes
        
        Acesse agora mesmo a aba "üî• Mapa de Calor de Convers√£o"! üìà
        """)
        if st.button("N√£o mostrar novamente", key="heatmap_notice", type="primary"):
            closed_notices['heatmap_notice'] = True
            save_closed_notices(username, closed_notices)
            st.rerun()

    # Aviso da feature de Cupons
    if not closed_notices.get('coupon_notice', False):
        st.info("""
        ### üéüÔ∏è Nova Feature: An√°lise de Cupons
        
        Agora voc√™ pode analisar o desempenho dos seus cupons de desconto!
        
        **Novos recursos:**
        * Nova tabela de an√°lise de cupons na Vis√£o Geral
        * Filtro de cupons na barra lateral
        * M√©tricas detalhadas por cupom
        * An√°lise de convers√£o e receita por cupom
        
        Confira agora mesmo na aba "Vis√£o Geral"! üí°
        """)
        if st.button("N√£o mostrar novamente", key="coupon_notice", type="primary"):
            closed_notices['coupon_notice'] = True
            save_closed_notices(username, closed_notices)
            st.rerun()

    # Aviso de meta n√£o cadastrada
    if meta_receita == 0:
        st.warning("""
        ‚ö†Ô∏è **Meta do M√™s N√£o Cadastrada**
        
        Voc√™ ainda n√£o cadastrou sua meta de receita para este m√™s.
        Para um melhor acompanhamento do seu desempenho, acesse a aba Configura√ß√µes e cadastre sua meta mensal.
        """) 

def send_discord_alert(pendencia, username):
    """Envia alerta formatado para o Discord."""
    webhook_url = st.secrets["general"]["discord_webhook_url"]
    
    # Definir cores baseadas na severidade
    severity_colors = {
        'alta': 0xDC3545,  # Vermelho
        'media': 0xFFC107,  # Amarelo
        'baixa': 0x17A2B8   # Azul
    }
    
    # Criar emoji baseado na severidade
    severity_emojis = {
        'alta': 'üî¥',
        'media': 'üü°',
        'baixa': 'üîµ'
    }
    
    # Formatar a mensagem para o Discord
    embed = {
        "title": f"{severity_emojis[pendencia['severidade']]} {pendencia['titulo']}",
        "description": pendencia['descricao'],
        "color": severity_colors[pendencia['severidade']],
        "fields": [
            {
                "name": "üéØ A√ß√£o Necess√°ria",
                "value": pendencia['acao'].replace('<a href="', '').replace('" target="_blank" style="color: #0366d6; text-decoration: none;">', ' - ').replace('</a>', ''),
                "inline": False
            }
        ],
        "footer": {
            "text": f"MyMetric ‚Ä¢ {username} ‚Ä¢ {datetime.now().strftime('%d/%m/%Y %H:%M')}"
        }
    }
    
    # Preparar payload
    payload = {
        "embeds": [embed]
    }
    
    try:
        response = requests.post(webhook_url, json=payload)
        response.raise_for_status()
    except Exception as e:
        pass  # Silently handle any errors in Discord notification 